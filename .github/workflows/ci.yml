name: Algotrading Agent CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]
    
    services:
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-benchmark pytest-timeout vaderSentiment beautifulsoup4 lxml
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Security scan with bandit
      run: |
        pip install bandit
        bandit -r algotrading_agent/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=algotrading_agent --cov-report=xml --timeout=300
      env:
        ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY_TEST || 'test_key' }}
        ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY_TEST || 'test_secret' }}
        ALPACA_PAPER_TRADING: true
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY || 'test_groq' }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test_openai' }}
        LOG_LEVEL: ERROR
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --timeout=300
      env:
        ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY_TEST || 'test_key' }}
        ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY_TEST || 'test_secret' }}
        ALPACA_PAPER_TRADING: true
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY || 'test_groq' }}
        LOG_LEVEL: ERROR
    
    - name: Run safety tests
      run: |
        pytest tests/safety/ -v --timeout=600
      env:
        ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY_TEST || 'test_key' }}
        ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY_TEST || 'test_secret' }}
        ALPACA_PAPER_TRADING: true
        LOG_LEVEL: ERROR
    
    - name: Run performance benchmarks
      run: |
        pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          benchmark.json
          bandit-report.json

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here
    
    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
