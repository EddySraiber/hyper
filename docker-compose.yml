version: '3.8'

services:
  algotrading-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: algotrading_agent
    restart: unless-stopped
    
    # Environment variables
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
      - ALPACA_PAPER_TRADING=true
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
    
    # Volumes for data persistence
    volumes:
      - ./data:/app/data:rw           # Persistent data (memory, trades, etc.)
      - ./logs:/app/logs:rw           # Log files
      - ./config:/app/config:ro       # Configuration files (read-only)
      - news_cache:/app/cache:rw      # News data cache
    
    # Ports (for monitoring/health checks)
    ports:
      - "8080:8080"
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    # Network for future services (Redis, monitoring, etc.)
    networks:
      - algotrading_network

  # Optional: Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    container_name: algotrading_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - algotrading_network
    command: redis-server --appendonly yes
    
  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: algotrading_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - algotrading_network
    profiles:
      - monitoring

volumes:
  news_cache:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  algotrading_network:
    driver: bridge